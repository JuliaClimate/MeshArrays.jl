var documenterSearchIndex = {"docs":
[{"location":"#MeshArrays.jl-documentation-1","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"","category":"section"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"MeshArrays.jl primarily defines composite types that embed inter-connected array collections within a struct and provides an exchange function that effectively transfers data between connected arrays. It was originally introduced, as gcmfaces.jl, in this JuliaCon-2018 presentation (see below for notebooks). Note: MeshArrays.jl is registered, documented, archived, and routinely tested, but is still regarded as a preliminary implementation.","category":"page"},{"location":"#Contents-1","page":"MeshArrays.jl documentation","title":"Contents","text":"","category":"section"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"","category":"page"},{"location":"#Installation-1","page":"MeshArrays.jl documentation","title":"Installation","text":"","category":"section"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"using Pkg\nPkg.add(\"MeshArrays\")\nPkg.test(\"MeshArrays\")","category":"page"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"Note: Julia's package manager is documented here within docs.julialang.org.","category":"page"},{"location":"#Use-examples-1","page":"MeshArrays.jl documentation","title":"Use examples","text":"","category":"section"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"The JuliaCon-2018 presentation relied on two Jupyter notebooks that are available in the JuliaCon2018Notebooks repo and pre-defined grids that are available from this website and can e.g. be downloaded as follows:","category":"page"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"setenv DemoGrids 'ftp://mit.ecco-group.org/gforget/grid_examples/'\nwget --recursive {$DemoGrids}/GRID_CS32/\nwget --recursive {$DemoGrids}/GRID_LLC90/\nmv mit.ecco-group.org/gforget/grid_examples/GRID_* .","category":"page"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"After downloading GRID_LLC90/, you can also replicate this example using the following commands:","category":"page"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"using MeshArrays\n\n!isdir(\"GRID_LLC90\") ? error(\"could not find GRID_LLC90/\") : nothing\n(D,Dexch,Darr,DD)=demo1(\"LLC90\")\n(Rini,Rend,DXCsm,DYCsm)=demo2()\n\ninclude(joinpath(dirname(pathof(MeshArrays)),\"gcmfaces_plot.jl\"))\nqwckplot(Rini)\nqwckplot(Rend)","category":"page"},{"location":"#Main-Features-1","page":"MeshArrays.jl documentation","title":"Main Features","text":"","category":"section"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"MeshArrays.jl composite types contain array collections where arrays are typically inter-connected at their edges. It provides exchange functions that transfer data between neighbor arrays so that the user can extend the domain of computation as needed e.g. for interpolation or to compute spatial derivatives.","category":"page"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"The composite types specify how each array collection forms a mesh and provide information to allow exchange to dispatch to the appropriate method. Various configurations that are commonly used in Earth System Models are implemented using the concrete type called gcmfaces. Embedded arrays, or meshes, each represent a subdomain within, e.g., an Earth System Model grid.","category":"page"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"The gcmfaces name derives from a previous Matlab / Octave package that was introduced in Forget et al., 2015, doi:10.5194/gmd-8-3071-2015, and inspired this Julia package. Here, GCM is an acronym for General Circulation Model, or Global Climate Model as described in this wikipedia entry, and faces is just another name for meshes, arrays, facets, or subdomains.","category":"page"},{"location":"#API-index-1","page":"MeshArrays.jl documentation","title":"API index","text":"","category":"section"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"","category":"page"},{"location":"#API-details-1","page":"MeshArrays.jl documentation","title":"API details","text":"","category":"section"},{"location":"#","page":"MeshArrays.jl documentation","title":"MeshArrays.jl documentation","text":"Modules = [MeshArrays]\nOrder   = [:function, :type]","category":"page"},{"location":"#MeshArrays.GCMGridLoad-Tuple{}","page":"MeshArrays.jl documentation","title":"MeshArrays.GCMGridLoad","text":"GCMGridLoad()\n\nLoads grid variables from files located in grDir set by GCMGridSpec.\n\nGrid variables are XC, XG, YC, YG, RAC, RAZ, DXC, DXG, DYC, DYG, hFacC, hFacS, hFacW, Depth based on the MITgcm naming convention.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.GCMGridOnes-Tuple{Any,Any,Any}","page":"MeshArrays.jl documentation","title":"MeshArrays.GCMGridOnes","text":"GCMGridOnes(grTp,nF,nP)\n\nDefine all-1 grid variables instead of using GCMGridSpec & GCMGridLoad.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.GCMGridSpec","page":"MeshArrays.jl documentation","title":"MeshArrays.GCMGridSpec","text":"GCMGridSpec(gridName)\n\nSet global variables in the module scope for grDir, nFaces, grTopo, ioSize, facesSize, ioPrec using hard-coded values for LLC90, CS32, LL360 (for now).\n\n\n\n\n\n","category":"function"},{"location":"#MeshArrays.convergence-Tuple{gcmfaces,gcmfaces}","page":"MeshArrays.jl documentation","title":"MeshArrays.convergence","text":"convergence(uFLD::gcmfaces,vFLD::gcmfaces)\n\nCompute convergence of a vector field\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.convert2array-Tuple{gcmfaces}","page":"MeshArrays.jl documentation","title":"MeshArrays.convert2array","text":"convert2array(fld::gcmfaces)\n\nConvert gcmfaces to array\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.convert2array-Union{Tuple{Array{T,N}}, Tuple{N}, Tuple{T}} where N where T","page":"MeshArrays.jl documentation","title":"MeshArrays.convert2array","text":"convert2array(fld::Array{T,N}) where {T,N}\n\nConvert array to gcmfaces\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.convert2gcmfaces-Tuple{Array}","page":"MeshArrays.jl documentation","title":"MeshArrays.convert2gcmfaces","text":"convert2gcmfaces(fld::Array)\n\nConvert gcmfaces to mitgcm output\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.convert2gcmfaces-Tuple{gcmfaces}","page":"MeshArrays.jl documentation","title":"MeshArrays.convert2gcmfaces","text":"convert2gcmfaces(fld::gcmfaces)\n\nConvert mitgcm output to gcmfaces\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.demo1-Tuple{Any}","page":"MeshArrays.jl documentation","title":"MeshArrays.demo1","text":"demo1(gridChoice)\n\nDemonstrate basic fucntions (arithmetic, exchange, GCMGridLoad, gradient, etc.). Example call:\n\nisdir(\"GRID_LLC90\") ? (D,Dexch,Darr,DD)=demo1(\"LLC90\") : nothing\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.demo2-Tuple{}","page":"MeshArrays.jl documentation","title":"MeshArrays.demo2","text":"demo2()\n\nDemonstrate higher level functions using smooth() and\n\nisdir(\"GRID_LLC90\") ? demo1(\"LLC90\") : GCMGridOnes(\"cs\",6,100)\n(Rini,Rend,DXCsm,DYCsm)=demo2()\n@time Rend=smooth(Rini,DXCsm,DYCsm)\n\ninclude(joinpath(dirname(pathof(MeshArrays)),\"gcmfaces_plot.jl\"))\nqwckplot(Rini)\nqwckplot(Rend)\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.demo3-Tuple{Any,Any}","page":"MeshArrays.jl documentation","title":"MeshArrays.demo3","text":"demo3()\n\nDemonstrate computations of ocean meridional transports. Calling sequence:\n\n!isdir(\"GRID_LLC90\")||!isdir(\"nctiles_climatology\") ? error(\"missing files\") : nothing\n\nGCMGridSpec(\"LLC90\")\nGCMGridLoad()\n\ninclude(joinpath(dirname(pathof(MeshArrays)),\"gcmfaces_nctiles.jl\"))\nfileName=\"nctiles_climatology/UVELMASS/UVELMASS\"\nU=read_nctiles(fileName,\"UVELMASS\");\nfileName=\"nctiles_climatology/VVELMASS/VVELMASS\"\nV=read_nctiles(fileName,\"VVELMASS\");\n\n(UV, LC, Tr)=demo3(U,V);\n\nusing Statistics\ninclude(joinpath(dirname(pathof(MeshArrays)),\"gcmfaces_plot.jl\"))\nqwckplot(UV[\"U\"][:,:,1,1],\"U component (note varying face orientations)\")\nqwckplot(UV[\"V\"][:,:,1,1],\"V component (note varying face orientations)\")\nplot(dropdims(mean(sum(Tr,dims=2),dims=3),dims=(2,3))/1e6,title=\"meridional transport\")\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.exchange-Tuple{gcmfaces}","page":"MeshArrays.jl documentation","title":"MeshArrays.exchange","text":"exchange(fld::gcmfaces)\n\nExchange / transfer data between neighbor arrays. Other methods are\n\nexchange(fld::gcmfaces,N::Integer)\nexchange(u::gcmfaces,v::gcmfaces)\nexchange(u::gcmfaces,v::gcmfaces,N::Integer)\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.fijind-Tuple{gcmfaces,Int64}","page":"MeshArrays.jl documentation","title":"MeshArrays.fijind","text":"fijind(A::gcmfaces,ij::Int)\n\nfijind convenience function.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.fsize-Union{Tuple{AbstractGcmfaces{T,N}}, Tuple{N}, Tuple{T}} where N where T","page":"MeshArrays.jl documentation","title":"MeshArrays.fsize","text":"fsize(A::AbstractGcmfaces{T, N}) where {T,N}\n\nfsize convenience function.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.fsize-Union{Tuple{Array{Array{T,N},1}}, Tuple{N}, Tuple{T}} where N where T","page":"MeshArrays.jl documentation","title":"MeshArrays.fsize","text":"fsize(A::Array{Array{T,N},1}) where {T,N}\n\nfsize convenience function.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.fsize-Union{Tuple{N}, Tuple{T}, Tuple{AbstractGcmfaces{T,N},Int64}} where N where T","page":"MeshArrays.jl documentation","title":"MeshArrays.fsize","text":"fsize(A::AbstractGcmfaces{T, N},i::Int) where {T,N}\n\nfsize convenience function.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.fsize-Union{Tuple{N}, Tuple{T}, Tuple{Array{Array{T,N},1},Int64}} where N where T","page":"MeshArrays.jl documentation","title":"MeshArrays.fsize","text":"fsize(A::Array{Array{T,N},1},i::Int) where {T,N}\n\nfsize convenience function.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.gradient-Tuple{gcmfaces,Bool}","page":"MeshArrays.jl documentation","title":"MeshArrays.gradient","text":"gradient(inFLD::gcmfaces,doDIV::Bool)\n\nCompute spatial derivatives with or without dividing by grid scale.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.gradient-Tuple{gcmfaces,gcmfaces,gcmfaces}","page":"MeshArrays.jl documentation","title":"MeshArrays.gradient","text":"gradient(inFLD::gcmfaces,iDXC::gcmfaces,iDYC::gcmfaces)\n\nCompute spatial derivatives and multiply by inverse grid scale.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.gradient-Tuple{gcmfaces}","page":"MeshArrays.jl documentation","title":"MeshArrays.gradient","text":"gradient(inFLD::gcmfaces)\n\nCompute spatial derivatives.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.mask-Tuple{gcmfaces,Number,Number}","page":"MeshArrays.jl documentation","title":"MeshArrays.mask","text":"mask(fld::gcmfaces, val::Number)\n\nReplace noval instances with val\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.mask-Tuple{gcmfaces,Number}","page":"MeshArrays.jl documentation","title":"MeshArrays.mask","text":"mask(fld::gcmfaces, val::Number)\n\nReplace non finite values with val\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.mask-Tuple{gcmfaces}","page":"MeshArrays.jl documentation","title":"MeshArrays.mask","text":"mask(fld::gcmfaces)\n\nCall mask(fld,NaN)\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.read_bin-Tuple{String,Any,Any,DataType}","page":"MeshArrays.jl documentation","title":"MeshArrays.read_bin","text":"read_bin(fil::String,kt,kk,prec::DataType)\n\nRead model output from binary file and convert to gcmfaces structure.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.read_bin-Tuple{String,DataType}","page":"MeshArrays.jl documentation","title":"MeshArrays.read_bin","text":"read_bin(fil,[],[],prec)\n\nRead model output from binary file and convert to gcmfaces structure.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.read_bin-Tuple{String}","page":"MeshArrays.jl documentation","title":"MeshArrays.read_bin","text":"read_bin(fil::String)\n\nRead model output from binary file and convert to gcmfaces structure.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.smooth-Tuple{gcmfaces,gcmfaces,gcmfaces}","page":"MeshArrays.jl documentation","title":"MeshArrays.smooth","text":"smooth(FLD::gcmfaces,DXCsm::gcmfaces,DYCsm::gcmfaces)\n\nSmooth out scales below threshold\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.gcmfaces","page":"MeshArrays.jl documentation","title":"MeshArrays.gcmfaces","text":"gcmfaces{T, N}\n\ngcmfaces data structure.\n\n\n\n\n\n","category":"type"},{"location":"#MeshArrays.gcmfaces-Tuple{}","page":"MeshArrays.jl documentation","title":"MeshArrays.gcmfaces","text":"gcmfaces()\n\ngcmfaces constructor.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.gcmfaces-Union{Tuple{AbstractGcmfaces{T,N}}, Tuple{N}, Tuple{T}} where N where T","page":"MeshArrays.jl documentation","title":"MeshArrays.gcmfaces","text":"gcmfaces(A::AbstractGcmfaces{T, N}) where {T,N}\n\ngcmfaces constructor.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.gcmfaces-Union{Tuple{N}, Tuple{T}, Tuple{Int64,String,Array{Array{T,N},1}}} where N where T","page":"MeshArrays.jl documentation","title":"MeshArrays.gcmfaces","text":"gcmfaces(nFaces::Int,grTopo::String,\n  v1::Array{Array{T,N},1}) where {T,N}\n\ngcmfaces constructor.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.gcmfaces-Union{Tuple{N}, Tuple{T}, Tuple{Int64,String,Type{T},Array{Tuple{Vararg{Int64,N}},N1} where N1,Tuple{Vararg{Int64,N}}}} where N where T","page":"MeshArrays.jl documentation","title":"MeshArrays.gcmfaces","text":"gcmfaces(nFaces::Int,grTopo::String,::Type{T},fSize::Array{NTuple{N, Int}},\n  aSize::NTuple{N,Int}) where {T,N}\n\ngcmfaces constructor.\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.gcmsubset","page":"MeshArrays.jl documentation","title":"MeshArrays.gcmsubset","text":"gcmsubset{T, N}\n\ngcmsubset data structure.\n\n\n\n\n\n","category":"type"},{"location":"#MeshArrays.LatCircles-Tuple{Any}","page":"MeshArrays.jl documentation","title":"MeshArrays.LatCircles","text":"LatCircles(LatValues)\n\nCompute integration pathes along latitude circles\n\n\n\n\n\n","category":"method"},{"location":"#MeshArrays.TransportThrough-Tuple{Any,Any}","page":"MeshArrays.jl documentation","title":"MeshArrays.TransportThrough","text":"TransportThrough(VectorField,IntegralPath)\n\nComputes transport through in integration path\n\n\n\n\n\n","category":"method"}]
}
